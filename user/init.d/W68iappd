#!/bin/sh

# if app not exist
if [ ! -e /bin/ralinkiappd ]; then
    exit 0
fi


# get params
. /etc/scripts/global.sh

LOG="logger -t iappd"

start() {
    get_param
    if [ "$RadioOn" = "1" -o "$RadioOnINIC" = "1" ]; then
	if [ "$iaappneed" = "1" ]; then
	    $LOG "Starting iappd 802.11f daemon"
	    kernel_tune
	    # ethernet if - lan_if
	    # wlan if for recive data - standalone if or bridge interface
	    # wlan if for ioctl - standalone if
	    # for example ralinkiappd -e "$lan_if" -w "$lan_if" -wi "$first_wlan_root_if" -wn "$second_wlan_root_if" &
	    # this is defaults not need direct set ifnames in this case
	    ralinkiappd $IFADD $IAPPDebug &
	fi
    fi
}

get_param() {
    eval `nvram_buf_get 2860 IAPPDebug`

    FtSupport=`nvram_get 2860 FtSupport | awk '{ gsub(";"," "); print }'`
    RRMEnable=`nvram_get 2860 RRMEnable | awk '{ gsub(";"," "); print }'`

    # check for need start iaapd
    iaappneed=0
    for iaappneed in $FtSupport $RRMEnable
    do
	if [ "$iaappneed" = "1" ]; then
	    break
	fi
    done

    # for multiif
    IFADD="-wi ra0"
    if [ "$second_wlan_root_if" != "" ]; then
	IFADD="$IFADD -wi $second_wlan_root_if"
    fi
    if [ "$IAPPDebug" != "" ] && [ "$IAPPDebug" != "0" ]; then
	IAPPDebug="-d $IAPPDebug"
    fi
}

kernel_tune() {
    ######################################################################################################################################
    # Need for faster seamless roam:
    # 1) decrease some timeouts more fast rearrange arp cache and bridge fdb records
    # 2) define behavior for gratuitous ARP frames who's IP is not already present in the ARP table - create new entries in the ARP table
    # 3) in bridge mode disable arp/rp filters
    ######################################################################################################################################
    sysctl -wq net.ipv4.neigh.$phys_lan_if.base_reachable_time_ms=10000
    sysctl -wq net.ipv4.neigh.$phys_lan_if.delay_first_probe_time=1
    sysctl -wq net.ipv4.conf.$phys_lan_if.arp_accept=1

    sysctl -wq net.ipv4.neigh.$lan_if.base_reachable_time_ms=10000
    sysctl -wq net.ipv4.neigh.$lan_if.delay_first_probe_time=1
    sysctl -wq net.ipv4.conf.$lan_if.arp_accept=1

    if [ "$first_wlan_root_if" != "" ]; then
	sysctl -wq net.ipv4.neigh.$first_wlan_root_if.base_reachable_time_ms=10000
	sysctl -wq net.ipv4.neigh.$first_wlan_root_if.delay_first_probe_time=1
	sysctl -wq net.ipv4.conf.$first_wlan_root_if.arp_accept=1
    fi
    if [ "$second_wlan_root_if" != "" ]; then
	sysctl -wq net.ipv4.neigh.$second_wlan_root_if.base_reachable_time_ms=10000
	sysctl -wq net.ipv4.neigh.$second_wlan_root_if.base_delay_first_probe_time=1
	sysctl -wq net.ipv4.conf.$second_wlan_root_if.arp_accept=1
    fi
    if [ "$OperationMode" = "0" ]; then
	sysctl -wq net.ipv4.conf.all.arp_filter=0
	sysctl -wq net.ipv4.conf.default.arp_filter=0
	sysctl -wq net.ipv4.conf.all.rp_filter=0
	sysctl -wq net.ipv4.conf.default.rp_filter=0
    fi
    if [ "$lan_if" = "br0" ]; then
	brctl setageing "$lan_if" 5
    fi
}

stop() {
    pid=`pidof ralinkiappd`
    if [ "$pid" != "" ]; then
	$LOG "Stopping 802.11f roaming daemon"
	killall -q ralinkiappd
	killall -q -SIGKILL ralinkiappd
    fi
}

case "$1" in
        start)
            start
            ;;

        stop)
            stop
            ;;

        restart)
            stop
            start
            ;;

        *)
            echo $"Usage: $0 {start|stop|restart}"
esac
