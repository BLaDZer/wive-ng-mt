#!/bin/sh

# if app not exist
if [ ! -e /bin/smbd ] || [ ! -e /bin/nmbd ]; then
    exit 0
fi

# get params
. /etc/scripts/global.sh

LOG="logger -t samba"

start() {
if [ "$SmbEnabled" = "1" ]; then
    stop
    get_param

    echo "[global]" > $CONFIG
    echo "    socket options = $socket_options" >> $CONFIG
    echo "    workgroup = $WorkGroup" >> $CONFIG
    echo "    netbios name = $SmbNetBIOS" >> $CONFIG
    echo "    server string = $SmbString" >> $CONFIG
    echo "    os level = $SmbOsLevel" >> $CONFIG
    echo "    force user = daemon" >> $CONFIG
    echo "    time server = $ntp_support" >> $CONFIG

    # external wins register support
    if [ -e /tmp/wins.dhcp ]; then
	wins_srvs=`cat /tmp/wins.dhcp | tail -qn1`
	echo "wins server			= $wins_srvs"			>> $CONFIG
	echo "wins proxy			= yes"				>> $CONFIG
	echo "name resolve order		= lmhosts host wins bcast"	>> $CONFIG
    else
	# for file share mode need increase buffers size
	if [ "$interfaces" != "" ]; then
	    echo "    interfaces = $interfaces" >> $CONFIG
	fi
	echo "domain master			= yes"				>> $CONFIG
	echo "preferred master			= yes"				>> $CONFIG
	echo "local master			= yes"				>> $CONFIG
	echo "wins support			= yes"				>> $CONFIG
	echo "name resolve order		= lmhosts host bcast"		>> $CONFIG
    fi
    echo "    hosts allow = $lan_ipaddr/$lan_netmask" >> $CONFIG

    # add template to config
    cat $TEMPLATE >> $CONFIG

    # share /media/*
    publiclist=`df -h | grep -E "/dev/sd.*media|/dev/mmc.*media" | awk {' print $6 '}`
    count=1
    if [ "$publiclist" != "" ] && [ -e /media ]; then
	for share in $publiclist ; do
	    echo "[public$count]" >> $CONFIG
	    echo "    comment = $share" >> $CONFIG
	    echo "    path = $share" >> $CONFIG
	    echo "    public = yes" >> $CONFIG
	    echo "    browseable = yes" >> $CONFIG
	    echo "    guest ok = yes" >> $CONFIG
	    echo "    guest only = yes" >> $CONFIG
	    echo "    writable = yes" >> $CONFIG
	    echo "" >> $CONFIG
	    count="$(($count+1))"
	done
    fi

    find /var/log -type f -name "*mbd*" | while read samba_log; do
	echo > "$samba_log"
    done

    $LOG "Starting WINS/SMB SERVER."
    nmbd -s /etc/smb.conf -d0 -D &
    nice -n 8 smbd -s /etc/smb.conf -d0 -D &

    if [ "$WsddEnabled" = "1" ]; then
	$LOG "Starting WSD/LLMNR Discovery/Name Service Daemon."
	# add/replace route multicast local srv to LAN
	ip -4 route replace $upnmp_net dev $lan_if
	wsdd2 -4 -d &
    fi
fi
}


get_param() {
    eval `nvram_buf_get 2860 WorkGroup SmbNetBIOS SmbString SmbOsLevel SmbTimeserver NTPEnabled NTPServerIP Login l2tp_srv_enabled WsddEnabled`
    CONFIG="/etc/smb.conf"
    TEMPLATE="/etc/smb.conf.template"

    # create smabass if not exist
    touch /etc/smbpasswd

    if [ "$SmbTimeserver" = "1" ] && [ "$NTPEnabled" = "1" ] && [ "$NTPServerIP" != "" ]; then
	ntp_support="yes"
    else
	ntp_support="no"
    fi
    if [ -d /proc/bus/usb ]; then
	socket_options="SO_BROADCAST IPTOS_THROUGHPUT TCP_NODELAY SO_RCVBUF=65536 SO_SNDBUF=65536" >> $CONFIG
    else
	socket_options="SO_BROADCAST IPTOS_THROUGHPUT TCP_NODELAY SO_RCVBUF=4096 SO_SNDBUF=4096" >> $CONFIG
    fi

    if [ "$l2tp_srv_enabled" = "1" ]; then
	interfaces=""
    else
	interfaces="lo 127.0.0.1/255.0.0.0 $lan_if $lan_ipaddr/$lan_netmask"
    fi
}

stop() {
    count=0
    pid=`pidof smbd`
    if [ "$pid" != "" ]; then
	$LOG "Stop SMBD daemon."
    fi
    # try 3 times for correct shutdown
    while kill "$pid" > /dev/null 2>&1; do
	    pid=`pidof smbd`
	    count="$(($count+1))"
	    if [ "$count" = "3" ] || [ "$pid" = "" ]; then
		if [ "$pid" != "" ]; then
		    kill -SIGKILL "$pid" > /dev/null 2>&1
		fi
		rm -f /var/lock/smbd.pid
		break
	    fi
	    usleep 500000
    done

    count=0
    pid=`pidof nmbd`
    if [ "$pid" != "" ]; then
	$LOG "Stop NMBD daemon."
    fi
    # try 3 times for correct shutdown
    while kill "$pid" > /dev/null 2>&1; do
	    pid=`pidof nmbd`
	    count="$(($count+1))"
	    if [ "$count" = "3" ] || [ "$pid" = "" ]; then
		if [ "$pid" != "" ]; then
		    kill -SIGKILL "$pid" > /dev/null 2>&1
		fi
		rm -f /var/lock/nmbd.pid
		break
	    fi
	    usleep 500000
    done

    pid=`pidof wsdd2`
    if [ "$pid" != "" ]; then
	$LOG "Stop wsdd2."
	killall -q wsdd2
	killall -q -SIGKILL wsdd2
    fi

}

case "$1" in
        start)
            start
            ;;

	stop)
            stop
            ;;

	restart)
            stop
            start
            ;;

        *)
            echo $"Usage: $0 {start|stop|restart}"
esac
