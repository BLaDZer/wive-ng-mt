#!/bin/sh

# only clean load start this
if [ -f /tmp/nvram_checked ] && [ "$1" != "genmac" ]; then
    exit 0
fi

LOG="echo checkconf "

# include kernel config
. /etc/scripts/config.sh

get_param() {
    # get parametrs
    eval `nvram_buf_get 2860 IS_WIVE CHECKMAC Login Password OperationMode IPv6OpMode \
	    RadioOn RadioOnINIC ApCliBridgeOnly ApCliClientOnly ApCliIfName WdsIfName BssidIfName EntryLifeCheck`

    # default mac vendor mask for generate new macs if need
    VENDMASK="F8:F0:82"
}

checkminimalconfig()
{
    #
    # OperationMode adjustment:
    #   if AP client was not compiled and operation mode was set "3" -> set $OperationMode "1"
    #   if Station was not compiled and operation mode was set "2" -> set $OperationMode "1"
    if   [ "$OperationMode" = "3" ] && [ "$CONFIG_RT2860V2_AP_APCLI" = "" -a "$CONFIG_MT7610_AP_APCLI" = "" -a "$CONFIG_MT76X2_AP_APCLI" = "" ]; then
	nvram_set 2860 OperationMode 1
	OperationMode="1"
    elif [ "$OperationMode" = "2" ] && [ "$CONFIG_RT2860V2_STA" = "" ] && [ "$CONFIG_MT76X2_STA" = "" ]; then
	nvram_set 2860 OperationMode 1
	OperationMode="1"
    fi

    #
    #	drop apcli specific flags in not apcli enabled modes
    #
    if [ "$OperationMode" != "3" ]; then
	if [ "$ApCliBridgeOnly" != "0" ] || [ "$ApCliClientOnly" != "0" ]; then
	    nvram_set 2860 ApCliBridgeOnly 0
	    nvram_set 2860 ApCliClientOnly 0
	fi
    fi

    #
    #	set default EntryLifeCheck=512 if not set
    #
    if [ "$EntryLifeCheck" = "" ]; then
	nvram_set 2860 EntryLifeCheck 512
    fi

    #
    #	set default ipv6 mode to disabled if not set
    #
    if [ "$IPv6OpMode" = "" ]; then
	nvram_set 2860 IPv6OpMode 0
    fi

    #
    #	correct apcli/wds/mbssid interfaces names for dual band use
    #
    if [ "$ApCliIfName" = "" ] || [ "$WdsIfName" = "" ] || [ "$BssidIfName" = "" ]; then
	nvram_set 2860 ApCliIfName "apcli0"
	nvram_set 2860 WdsIfName "wds"
	nvram_set 2860 BssidIfName "ra"
    fi

    #
    #	enable radio if not set RadioOn RadioOnINIC variables
    #
    if [ "$RadioOn" = "" ] || [ "$RadioOnINIC" = "" ]; then
	nvram_set 2860 RadioOn 1
	nvram_set 2860 RadioOnINIC 1
    fi

}

invendorrangetest() {
    # check macs is FF - factory is poor need rebuild
    CRASHEDMAC="FF:FF:FF"
    ISCRASHEDWANMAC=`eth_mac r wan | grep -i "$CRASHEDMAC" -c`
    ISCRASHEDLANMAC=`eth_mac r lan | grep -i "$CRASHEDMAC" -c`
    ISCRASHEDWLANMAC=`eth_mac r wlan | grep -i "$CRASHEDMAC" -c`
    if [ "$ISCRASHEDWANMAC" = "1" ] || [ "$ISCRASHEDLANMAC" = "1" ] || [ "$ISCRASHEDWLANMAC" = "1" ]; then
	$LOG "Factory part poor. Clear and load defaults to factory."
	fs burnrf
    fi
    # check in chipmaker range
    RALINKMAC="00:0C:43"
    ISDEFWANMAC=`eth_mac r wan | grep -i "$RALINKMAC" -c`
    ISDEFLANMAC=`eth_mac r lan | grep -i "$RALINKMAC" -c`
    ISDEFWLANMAC=`eth_mac r wlan | grep -i "$RALINKMAC" -c`
    if [ "$ISDEFWANMAC" = "1" ] || [ "$ISDEFLANMAC" = "1" ] || [ "$ISDEFWLANMAC" != "1" ]; then
	$LOG "MACs in chipmaker range rebuild macs."
	FORCE_REBUILD_MAC="YES"
	DONTTOUCHFACTORY="NO"
	DONTTOUCHWAN="NO"
    fi
    # check factory consistent with nvram
    if [ "$FORCE_REBUILD_MAC" != "YES" ]; then
	OLDMACWAN=`eth_mac r wan | egrep "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$"`
	OLDMACLAN=`eth_mac r lan | egrep "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$"`
	OLDMACWLAN=`eth_mac r wlan | egrep "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$"`
	MAC_TEST=`nvram_get 2860 WAN_MAC_ADDR | grep -i "$OLDMACWAN" -c`
	LANMAC_TEST=`nvram_get 2860 LAN_MAC_ADDR | grep -i "$OLDMACLAN" -c`
	WLANMAC_TEST=`nvram_get 2860 WLAN_MAC_ADDR | grep -i "$OLDMACWLAN" -c`
	$LOG "Factory mac adresess: $OLDMACWAN $OLDMACLAN $OLDMACWLAN"
    	if [ "$MAC_TEST" = "0" ] || [ "$LANMAC_TEST" = "0" ] || [ "$WLANMAC_TEST" = "0" ]; then
	    $LOG "MACs not consistent in factory and nvram, write factory MACs to nvram."
	    FORCE_REBUILD_MAC="YES"
	    DONTTOUCHFACTORY="YES"
	    DONTTOUCHWAN="NO"
	fi
    fi
    # check macs in vendor range
    MAC_TEST=`nvram_get 2860 WAN_MAC_ADDR | grep -i "$VENDMASK" -c`
    WMAC_TEST=`nvram_get 2860 WLAN_MAC_ADDR | grep -i "$VENDMASK" -c`
    WMAC2_TEST=`nvram_get 2860 WLAN2_MAC_ADDR | grep -i "$VENDMASK" -c`
    LANMAC_TEST=`nvram_get 2860 LAN_MAC_ADDR | grep -i "$VENDMASK" -c`
    if [ "$MAC_TEST" = "0" ] || [ "$WMAC_TEST" = "0" ] || [ "$WMAC2_TEST" = "0" ] || [ "$LANMAC_TEST" = "0" ] || [ "$FORCE_REBUILD_MAC" = "YES" ]; then
        $LOG "MAC is not in vendor range or sdk defaults or unconsistent - start MAC generate"
        genmac
    fi
}

dupelocalmacstest() {
    # china fabric stupid workaround
    LANMAC_TEST=`eth_mac r lan | egrep "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$"`
    WLANMAC_TEST=`eth_mac r wlan | egrep "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$"`
    if [ "$LANMAC_TEST" = "$WLANMAC_TEST" ]; then
	$LOG "Local macs dupe detected - force rebuild local macs"
	# force rebuild mac if unconsistent
	OLDMACWAN=""
	OLDMACLAN=""
	OLDMACWLAN=""
	FORCE_REBUILD_MAC="YES"
	DONTTOUCHFACTORY="NO"
	DONTTOUCHWAN="YES"
	genmac
    fi
}

genmac() {
    # get variables
    get_param

    # restore from factory or new generate for LAN/WAN/WLAN
    if [ "$OLDMACWAN" != "" ] && [ "$OLDMACLAN" != "" ] && [ "$OLDMACWLAN" != "" ]; then
	$LOG "Use original macs readed by factory before replace"
	WANMAC="$OLDMACWAN"
	LANMAC="$OLDMACLAN"
	WMAC="$OLDMACWLAN"
	VENDMASK=`echo $WANMAC | cut -f -3 -d :`
    else
	$LOG "Generate and use new macs"
	mac_wan=`cat /dev/urandom | hexdump | head -n1 | cut -f 2- -d " " | sed ':BEGIN;s/^\([^ ]\{0,29\}\) /\1/;tBEGIN' | sed 's/\(..\)/\1:/g; s/.$//' | tail -q -c 9`
	mac_lan=`cat /dev/urandom | hexdump | head -n1 | cut -f 2- -d " " | sed ':BEGIN;s/^\([^ ]\{0,29\}\) /\1/;tBEGIN' | sed 's/\(..\)/\1:/g; s/.$//' | tail -q -c 9`
	mac_wlan=`cat /dev/urandom | hexdump | head -n1 | cut -f 2- -d " " | sed ':BEGIN;s/^\([^ ]\{0,29\}\) /\1/;tBEGIN' | sed 's/\(..\)/\1:/g; s/.$//' | tail -q -c 9`
	WANMAC="$VENDMASK:$mac_wan"
	LANMAC="$VENDMASK:$mac_lan"
	WMAC="$VENDMASK:$mac_wlan"
    fi

    # allways build new mac for WLAN2
    mac_wlan2=`cat /dev/urandom | hexdump | head -n1 | cut -f 2- -d " " | sed ':BEGIN;s/^\([^ ]\{0,29\}\) /\1/;tBEGIN' | sed 's/\(..\)/\1:/g; s/.$//' | tail -q -c 9`
    WMAC2="$VENDMASK:$mac_wlan2"

    # write macs config to nvram
    if [ "$DONTTOUCHWAN" != "YES" ]; then
	$LOG "Set WAN   MAC - $WANMAC"
	nvram_set 2860 WAN_MAC_ADDR   "$WANMAC"
    fi
    $LOG "Set LAN   MAC - $LANMAC"
    nvram_set 2860 LAN_MAC_ADDR   "$LANMAC"
    $LOG "Set WLAN1 MAC - $WMAC"
    nvram_set 2860 WLAN_MAC_ADDR  "$WMAC"
    $LOG "Set WLAN2 MAC - $WMAC2"
    nvram_set 2860 WLAN2_MAC_ADDR "$WMAC2"
    $LOG "Set checkmac flag after rebuild"
    nvram_set 2860 CHECKMAC "YES"

    # write config to factory
    if [ "$DONTTOUCHFACTORY" != "YES" ]; then
	if [ "$DONTTOUCHWAN" != "YES" ]; then
	    FWMAC=`echo $WANMAC | sed "s/:/ /g"`
	    eth_mac w wan $FWMAC
	fi
	FLMAC=`echo $LANMAC | sed "s/:/ /g"`
	eth_mac w lan $FLMAC
	if [ "$CONFIG_RT_FIRST_IF_NONE" = "" ]; then
	    FWLMAC=`echo $WMAC | sed "s/:/ /g"`
	    eth_mac w wlan $FWLMAC
	fi
	if [ "$CONFIG_RT_SECOND_IF_NONE" = "" ]; then
	    FWLMAC2=`echo $WMAC2 | sed "s/:/ /g"`
	    eth_mac w wlan2 $FWLMAC2
	fi
    fi
}

checkmacandfactory() {
    #
    # check mac correct set if check mac in nvram set to not NO and web not start
    # set mask for macs generate and vendor name
    # vend mask must not be vald if nvram defaults loaded
    #
    if [ "$CHECKMAC" != "NO" ]; then
	invendorrangetest
	dupelocalmacstest
    fi
}

start() {
    # get variables
    get_param

    if [ "$IS_WIVE" != "YES" ]; then
	$LOG ">>>> FIRST BOOT OR NVRAM TRUNCLATED <<<<"
	###############################################
	# write RF calib, clear and load nvram defaults
	###############################################
	fs burnrf
    	fs nvramreset
	###############################################
	# reread parametrs and set needed falgs
	###############################################
	get_param
	FORCE_REBUILD_MAC="YES"
	CHECKMAC="YES"
    else
	$LOG ">>>>>>>>>>>> NORMAL BOOT <<<<<<<<<<<<<<<"
    fi

    # check minimal config options andcorrect if need
    checkminimalconfig

    # check macs correct and consystent
    checkmacandfactory

    # set checked flag
    touch /tmp/nvram_checked
}

stop() {
    :
}

case "$1" in
	start)
	    start
	    ;;

	genmac)
	    genmac
	    ;;

	checkmacandfactory)
	    checkmacandfactory
	    ;;

	stop)
	    stop
	    ;;

	restart)
	    stop
	    start
	    ;;
	*)
	    echo $"Usage: $0 {start|genmac|checkmacandfactory|stop|restart}"
	    exit 1
esac
