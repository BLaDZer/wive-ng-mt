#!/bin/sh

# get params
. /etc/scripts/global.sh

# include kernel config
. /etc/scripts/config.sh

LOG="logger -t modules"

start() {
    get_param
    # generate modules dep if need
    if [ ! -e /etc/modules.dep ]; then
        $LOG "Start modules.dep generate."
        depmod -a -n > /etc/modules.dep
    fi

    # wifi reconfigure and modules load only after full boot good
    if [  -e /tmp/bootgood ]; then
	$LOG "Load conntrack helpers modules."
	load_nat_helpers

	$LOG "Load application depended modules."
	load_apps_depended

	$LOG "Prepare wifi config."
	gen_wifi_config

	# load needed wireless modules
	if [ ! -e /tmp/wireless_modules_loaded ]; then
	    $LOG "Load wireless modules."
	    load_wireless_modules
	fi
	# set flag wireless modules loaded
	touch /tmp/wireless_modules_loaded

	# root interfaces must be up first
	$LOG "WiFi interfaces up."
	ifconfig $first_wlan_root_if txqueuelen	"$txqueuelen"
	ip link set $first_wlan_root_if up
	if [ "$second_wlan_root_if" != "" ]; then
	    $LOG "WiFi $second_wlan_root_if interface up."
	    # others modes
	    ifconfig $second_wlan_root_if txqueuelen	"$txqueuelen"
	    ip link set $second_wlan_root_if up
	fi

	# apcli mode sta interface
	if [ "$OperationMode" = "3" ]; then
	    $LOG "WiFi APCLI interface up."
	    if [ "$first_wlan_apcli" != "" ] && [ "$first_wlan_apcli" = "$ApCliIfName" ]; then
		ifconfig $first_wlan_apcli txqueuelen	"$txqueuelen"
		ip link set $first_wlan_apcli up
	    elif [ "$second_wlan_apcli" != "" ] && [ "$second_wlan_apcli" = "$ApCliIfName" ]; then
		ifconfig $second_wlan_apcli txqueuelen	"$txqueuelen"
		ip link set $second_wlan_apcli up
	    fi
	fi
    fi
}

load_wireless_modules() {
    if [ "$OperationMode" = "2" ]; then
	# macclone logic for STA mode module
	if [ "$macCloneEnabled" = "1" ] && [ "$macCloneMac" != "" ]; then
	    $LOG "STA Macclone mode. MAC: $macCloneMac"
	    mac="mac=$macCloneMac"
	else
	    mac=""
	fi
	$LOG "Load wifi STA module."
	if [ "$CONFIG_RT2860V2_STA" != "" ]; then
    	    modprobe -q rt2860v2_sta "$mac"
	fi
	if [ "$CONFIG_MT76X2_STA" != "" ]; then
	    modprobe -q mt76x2_sta
	fi
	if [ "$CONFIG_MT76X3_STA" != "" ]; then
	    modprobe -q mt76x3_sta
	fi
    else
	$LOG "Load wifi AP module."
	if [ "$CONFIG_RT2860V2_AP" != "" ]; then
    	    modprobe -q rt2860v2_ap
	fi
	if [ "$CONFIG_MT7610_AP" != "" ]; then
	    modprobe -q mt7610_ap
	fi
	if [ "$CONFIG_MT76X2_AP" != "" ]; then
    	    modprobe -q mt76x2_ap
	fi
	if [ "$CONFIG_MT76X3_AP" != "" ]; then
    	    modprobe -q mt76x3_ap
	fi
    fi
}

load_nat_helpers() {
    # not load nf_nat helpers in bridge mode
    if [ "$OperationMode" != "0" ] && [ "$ApCliBridgeOnly" != "1" ]; then
	# load conntrack helpers
	eval `nvram_buf_get 2860 fwAlgSIP fwAlgGRE fwAlgPPTP fwAlgH323 fwAlgFTP fwAlgRTSP`
	if [ "$fwAlgSIP" != "0" ]; then
	    modprobe -q nf_conntrack_sip
	    modprobe -q nf_nat_sip
	else
	    rmmod nf_nat_sip  > /dev/null 2>&1
	    rmmod nf_conntrack_sip > /dev/null 2>&1
	fi
	if [ "$fwAlgGRE" != "0" ]; then
	    modprobe -q nf_nat_proto_gre
	    modprobe -q nf_conntrack_proto_gre
	else
	    rmmod nf_nat_proto_gre > /dev/null 2>&1
	    rmmod nf_conntrack_proto_gre > /dev/null 2>&1
	fi
	if [ "$fwAlgPPTP" != "0" ]; then
	    modprobe -q nf_nat_pptp
	    modprobe -q nf_conntrack_pptp
	else
	    rmmod nf_nat_pptp > /dev/null 2>&1
	    rmmod nf_conntrack_pptp > /dev/null 2>&1
	fi
	if [ "$fwAlgH323" != "0" ]; then
	    modprobe -q nf_nat_h323
	    modprobe -q nf_conntrack_h323
	else
	    rmmod nf_nat_h323 > /dev/null 2>&1
	    rmmod nf_conntrack_h323 > /dev/null 2>&1
	fi
	if [ "$fwAlgFTP" != "0" ]; then
	    modprobe -q nf_conntrack_ftp
	    modprobe -q nf_nat_ftp
	else
	    rmmod nf_nat_ftp > /dev/null 2>&1
	    rmmod nf_conntrack_ftp > /dev/null 2>&1
	fi
	if [ "$fwAlgRTSP" != "0" ]; then
	    modprobe -q nf_conntrack_rtsp
	    modprobe -q nf_nat_rtsp
	else
	    rmmod nf_nat_rtsp > /dev/null 2>&1
	    rmmod nf_conntrack_rtsp > /dev/null 2>&1
	fi
    fi
}

load_apps_depended() {
    # do not remove this modules in the fly, may be apps crashed
    if [ -e /bin/chilli ] && [ "$chilli_enable" = "on" ]; then
	if [ ! -d /sys/module/tun ]; then
	    modprobe -q tun
	fi
    fi
}

gen_wifi_config() {
    rm -f /etc/Wireless/RT2860/RT2860.dat
    nvram_genwlconfig 2860
    if [ "$second_wlan_root_if" != "" ]; then
	rm -f /etc/Wireless/iNIC/RT2860AP.dat
	nvram_genwlconfig rtdev
    fi
}

wlan_down_all() {
    $LOG "Shutdown all wireless interfaces."

    # always clear conntrack and routes tables/caches
    flush_net_caches

    # flush ip address from all wireless interfaces, remove from bridge and down
    # first down single vifs
    if [ "$first_wlan_apcli" != "" ]; then
	delif_from_br $first_wlan_apcli
    fi
    if [ "$second_wlan_apcli" != "" ]; then
	delif_from_br $seond_wlan_apcli
    fi
    # second down multiple vifs
    if [ "$first_wlan_wds" != "" ]; then
	for ifnum in `seq 0 3`; do
	    delif_from_br ${first_wlan_wds}${ifnum}
	done
    fi
    if [ "$second_wlan_wds" != "" ]; then
	for ifnum in `seq 0 3`; do
	    delif_from_br ${second_wlan_wds}${ifnum}
	done
    fi
    # next down second radio module to
    if [ "$second_wlan" != "" ]; then
	for ifnum in `seq 7 -1 0`; do
	    delif_from_br ${second_wlan}${ifnum}
	done
    fi
    # root and mbssid interfaces must down end
    if [ "$first_wlan" != "" ]; then
	for ifnum in `seq 7 -1 0`; do
	    delif_from_br ${first_wlan}${ifnum}
	done
    fi

    # always clear conntrack and routes tables/caches
    flush_net_caches
}

stop() {
    $LOG "link wifi down first"
    wlan_down_all
    if [ -d /sys/module/hw_nat ]; then
	$LOG "Unload hw_nat module."
	rmmod hw_nat > /dev/null 2>&1
    fi
}

wifi_unload() {
    $LOG "Unload wireless modules."
    mod="rt2860v2_ap rt2860v2_sta mt7610_ap mt76x2_ap mt76x2_sta mt76x3_ap mt76x3_sta"
    for module in $mod
    do
	if [ -d /sys/module/$module ]; then
	    rmmod $module > /dev/null 2>&1
	fi
    done
    rm -f /tmp/wireless_modules_loaded
}

get_param() {
    eval `nvram_buf_get 2860 macCloneEnabled macCloneMac`
}

case "$1" in

	start)
	    start
	    ;;

	stop)
	    stop
	    ;;

	wlan_down_all)
	    wlan_down_all
	    ;;

	load_nat_helpers)
	    load_nat_helpers
	    ;;

	retune_wifi)
	    retune_wifi
	    ;;

	roaming_wifi)
	    roaming_wifi
	    ;;

	gen_wifi_config)
	    gen_wifi_config
	    ;;

	restart)
	    stop
	    start
	    ;;

	full_reload)
	    stop
	    wifi_unload
	    start
	    ;;

	*)
	    echo $"Usage: $0 {start|stop|restart|full_reload|wlan_down_all|load_nat_helpers|retune_wifi|roaming_wifi|gen_wifi_config}"
esac
