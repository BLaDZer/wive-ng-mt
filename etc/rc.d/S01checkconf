#!/bin/sh

# only clean load start this
if [ -e /tmp/nvram_checked ] && [ "$1" != "genmac" ]; then
    exit 0
fi

LOG="echo preconfigure "

# include kernel config
. /etc/scripts/config.sh

get_param()
{
    # get parametrs
    eval `nvram_buf_get 2860 IS_WIVE CHECKMAC Login Password OperationMode \
	RadioOn RadioOnINIC ApCliBridgeOnly ApCliClientOnly WPAPSK1 WPAPSK1INIC RegulatoryClass RegulatoryClassINIC HT_BWINIC`

    # default mac vendor mask for generate new macs if need
    VENDMASK="F8:F0:82"
    # default ralink mac mask
    RALINKMAC="00:0C:43"
    # macs is crashed mask
    CRASHEDMAC="FF:FF:FF"
}

# get parametrs
get_param

checkminimalconfig()
{
    #
    # OperationMode adjustment:
    #   if AP client was not compiled and operation mode was set "3" -> set $OperationMode "1"
    #   if Station was not compiled and operation mode was set "2" -> set $OperationMode "1"
    if   [ "$OperationMode" = "3" ] && [ "$CONFIG_RT2860V2_AP_APCLI" = "" ] && [ "$CONFIG_MT7610_AP_APCLI" = "" ] && [ "$CONFIG_MT76X2_AP_APCLI" = "" ] && [ "$CONFIG_MT76X3_AP_APCLI" = "" ]; then
	nvram_set 2860 OperationMode 1
	OperationMode="1"
    elif [ "$OperationMode" = "2" ] && [ "$CONFIG_RT2860V2_STA" = "" ] && [ "$CONFIG_MT76X2_STA" = "" ] && [ "$CONFIG_MT76X3_STA" = "" ]; then
	nvram_set 2860 OperationMode 1
	OperationMode="1"
    fi

    #
    # if device have only one port - not allow gate config -> set bridge ap by default
    #
    if [ "$CONFIG_RTESW_SWITCH_ONEPORT" = "y" ] && [ "$OperationMode" = "1" ]; then
	nvram_set 2860 OperationMode 0
	nvram_set 2860 wan_port 0
	OperationMode="0"
    fi

    #
    #	drop apcli specific flags in not apcli enabled modes
    #
    if [ "$OperationMode" != "3" ]; then
	if [ "$ApCliBridgeOnly" != "0" ] || [ "$ApCliClientOnly" != "0" ]; then
	    nvram_set 2860 ApCliBridgeOnly 0
	    nvram_set 2860 ApCliClientOnly 0
	fi
    fi

    #
    #	enable radio if not set RadioOn RadioOnINIC variables
    #
    if [ "$RadioOn" = "" ] || [ "$RadioOnINIC" = "" ]; then
	nvram_set 2860 RadioOn 1
	nvram_set 2860 RadioOnINIC 1
    fi

    #
    #	after split root auth pass frase need shure copy old pass to new for 5GHz band on update from old procedure
    #
    if [ "$WPAPSK1INIC" = "" ] && [ "$WPAPSK1" != "" ]; then
	nvram_set 2860 WPAPSK1INIC "$WPAPSK1"
    fi

    #
    #	after update to 4.8.0 need correct RRM parametrs
    #
    if [ "$RegulatoryClass" = "4" ] || [ "$RegulatoryClassINIC" = "1" ]; then
	nvram_set 2860 RDRegion "FCC"
	nvram_set 2860 RegulatoryClass "5;0;0;0;0"
	nvram_set 2860 RegulatoryClassINIC "1;2;3;4;0"
    fi

    #
    #	after update to 5.0.4 need correct HT_BWINIC parametr
    #
    if [ "$HT_BWINIC" = "" ]; then
	nvram_set 2860 HT_BWINIC "1"
    fi
}

invendorrangetest() {
    # check macs is FF - factory is poor need rebuild
    ISCRASHEDWANMAC=`eth_mac r wan | grep -i "$CRASHEDMAC" -c`
    ISCRASHEDLANMAC=`eth_mac r lan | grep -i "$CRASHEDMAC" -c`
    ISCRASHEDWLANMAC=`eth_mac r wlan | grep -i "$CRASHEDMAC" -c`
    if [ "$ISCRASHEDWANMAC" = "1" ] || [ "$ISCRASHEDLANMAC" = "1" ] || [ "$ISCRASHEDWLANMAC" = "1" ]; then
	$LOG "Factory part poor. Clear and load defaults to factory."
	fs burnrf
    fi
    # check in chipmaker range
    ISDEFWANMAC=`eth_mac r wan | grep -i "$RALINKMAC" -c`
    ISDEFLANMAC=`eth_mac r lan | grep -i "$RALINKMAC" -c`
    ISDEFWLANMAC=`eth_mac r wlan | grep -i "$RALINKMAC" -c`
    if [ "$ISDEFWANMAC" = "1" ] || [ "$ISDEFLANMAC" = "1" ] || [ "$ISDEFWLANMAC" = "1" ]; then
	$LOG "MACs in chipmaker range rebuild macs."
	NEEDREBUILDMACS="YES"
	DONTTOUCHFACTORY="NO"
	DONTTOUCHWAN="NO"
    fi
    # check macs in vendor range or corrupted
    if [ "$NEEDREBUILDMACS" != "YES" ]; then
	ISVENWANMAC=`eth_mac r wan | grep -E "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$" | grep -i "$VENDMASK" -c`
	ISVENLANMAC=`eth_mac r lan | grep -E "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$" | grep -i "$VENDMASK" -c`
	ISVENWLANMAC=`eth_mac r wlan | grep -E "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$" | grep -i "$VENDMASK" -c`
	if [ "$ISVENWANMAC" != "1" ] || [ "$ISVENLANMAC" != "1" ] || [ "$ISVENWLANMAC" != "1" ]; then
    	    $LOG "MACs is not in vendor range rebuild macs."
	    NEEDREBUILDMACS="YES"
	    DONTTOUCHFACTORY="NO"
	    DONTTOUCHWAN="NO"
	fi
    fi
    # check factory consistent with nvram
    if [ "$NEEDREBUILDMACS" != "YES" ]; then
	OLDMACWAN=`eth_mac r wan`
	OLDMACLAN=`eth_mac r lan`
	OLDMACWLAN=`eth_mac r wlan`
	MAC_TEST=`nvram_get 2860 WAN_MAC_ADDR | grep -i "$OLDMACWAN" -c`
	LANMAC_TEST=`nvram_get 2860 LAN_MAC_ADDR | grep -i "$OLDMACLAN" -c`
	WLANMAC_TEST=`nvram_get 2860 WLAN_MAC_ADDR | grep -i "$OLDMACWLAN" -c`
	$LOG "Factory mac adresess: $OLDMACWAN $OLDMACLAN $OLDMACWLAN"
    	if [ "$MAC_TEST" = "0" ] || [ "$LANMAC_TEST" = "0" ] || [ "$WLANMAC_TEST" = "0" ]; then
	    $LOG "MACs not consistent in factory and nvram, write factory MACs to nvram."
	    NEEDREBUILDMACS="YES"
	    DONTTOUCHFACTORY="YES"
	    DONTTOUCHWAN="NO"
	fi
    fi
    # need rebuild macs
    if [ "$NEEDREBUILDMACS" = "YES" ]; then
        $LOG "Start MAC generate"
        genmac
    fi
}

dupelocalmacstest() {
    # china fabric stupid workaround
    LANMAC_TEST=`eth_mac r lan`
    WLANMAC_TEST=`eth_mac r wlan`
    if [ "$LANMAC_TEST" = "$WLANMAC_TEST" ]; then
	$LOG "Local macs dupe detected - force rebuild local macs"
	# force rebuild mac if unconsistent
	OLDMACWAN=""
	OLDMACLAN=""
	OLDMACWLAN=""
	NEEDREBUILDMACS="YES"
	DONTTOUCHFACTORY="NO"
	DONTTOUCHWAN="YES"
        genmac
    fi
}

genmac() {
    # restore from factory or new generate for LAN/WAN/WLAN
    if [ "$OLDMACWAN" != "" ] && [ "$OLDMACLAN" != "" ] && [ "$OLDMACWLAN" != "" ]; then
	$LOG "Use original macs readed by factory before replace"
	WANMAC="$OLDMACWAN"
	LANMAC="$OLDMACLAN"
	WMAC="$OLDMACWLAN"
	VENDMASK=`echo $WANMAC | cut -f -3 -d :`
    else
	$LOG "Generate and use new macs"
	mac_wan=`printf "%02x:%02x:%02x" $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) | awk '{print toupper($0) }'`
	WANMAC="$VENDMASK:$mac_wan"
	mac_lan=`printf "%02x:%02x:%02x" $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) | awk '{print toupper($0) }'`
	LANMAC="$VENDMASK:$mac_lan"
	mac_wlan=`printf "%02x:%02x:%02x" $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) | awk '{print toupper($0) }'`
	WMAC="$VENDMASK:$mac_wlan"
    fi

    # allways build new mac for WLAN2
    mac_wlan2=`printf "%02x:%02x:%02x" $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) | awk '{print toupper($0) }'`
    WMAC2="$VENDMASK:$mac_wlan2"

    # write macs config to nvram
    if [ "$DONTTOUCHWAN" != "YES" ]; then
	$LOG "Set WAN   MAC - $WANMAC"
	nvram_set 2860 WAN_MAC_ADDR   "$WANMAC"
    fi
    $LOG "Set LAN   MAC - $LANMAC"
    nvram_set 2860 LAN_MAC_ADDR   "$LANMAC"
    $LOG "Set WLAN1 MAC - $WMAC"
    nvram_set 2860 WLAN_MAC_ADDR  "$WMAC"
    $LOG "Set WLAN2 MAC - $WMAC2"
    nvram_set 2860 WLAN2_MAC_ADDR "$WMAC2"
    $LOG "Set checkmac flag after rebuild"
    nvram_set 2860 CHECKMAC "YES"

    # write config to factory
    if [ "$DONTTOUCHFACTORY" != "YES" ]; then
	if [ "$DONTTOUCHWAN" != "YES" ]; then
	    FWMAC=`echo $WANMAC | sed "s/:/ /g"`
	    eth_mac w wan $FWMAC
	fi
	FLMAC=`echo $LANMAC | sed "s/:/ /g"`
	eth_mac w lan $FLMAC
	if [ "$CONFIG_RT_FIRST_IF_NONE" = "" ]; then
	    FWLMAC=`echo $WMAC | sed "s/:/ /g"`
	    eth_mac w wlan $FWLMAC
	fi
	if [ "$CONFIG_RT_SECOND_IF_NONE" = "" ]; then
	    FWLMAC2=`echo $WMAC2 | sed "s/:/ /g"`
	    eth_mac w wlan2 $FWLMAC2
	fi
    fi
}

checkmacandfactory() {
    #
    # check mac correct set if check mac in nvram set to not NO and web not start
    # set mask for macs generate and vendor name
    # vend mask must not be vald if nvram defaults loaded
    #
    if [ "$CHECKMAC" != "NO" ]; then
	invendorrangetest
	dupelocalmacstest
    fi
}

start() {
    # blink sys/vpn leds
    if [ -e /bin/gpio ]; then
	if [ "$CONFIG_RALINK_GPIO_SYS_LED" != "" ]; then
	    gpio l "$CONFIG_RALINK_GPIO_SYS_LED" 1 1 0 0 1000
	fi
    fi

    if [ "$IS_WIVE" != "YES" ]; then
	$LOG ">>>> FIRST BOOT OR NVRAM TRUNCLATED <<<<"
	###############################################
	# write RF calib, clear and load nvram defaults
	###############################################
	fs burnrf
    	fs nvramreset
	###############################################
	# reread parametrs and set needed falgs
	###############################################
	get_param
	NEEDREBUILDMACS="YES"
	CHECKMAC="YES"
    else
	$LOG ">>>>>>>>>>>> NORMAL BOOT <<<<<<<<<<<<<<<"
    fi

    # check minimal config options andcorrect if need
    checkminimalconfig

    # check macs correct and consystent
    checkmacandfactory

    # set checked flag
    touch /tmp/nvram_checked
}

stop() {
    :
}

case "$1" in
	start)
	    start
	    ;;

	genmac)
	    genmac
	    ;;

	checkmacandfactory)
	    checkmacandfactory
	    ;;

	stop)
	    stop
	    ;;

	restart)
	    stop
	    start
	    ;;
	*)
	    echo $"Usage: $0 {start|genmac|checkmacandfactory|stop|restart}"
esac
