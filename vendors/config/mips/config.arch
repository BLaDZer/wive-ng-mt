.EXPORT_ALL_VARIABLES:

############################################################################
#
#  A Generic mips config.arch that can be included by other platforms
#  to reduce the number of places that need to be edited when something
#  common changes.  If you include this file you may provide:
#
#  LOPT                - library optimisation flags
#  UOPT                - user optimisation flags
#
#  David McCullough <davidm@snapgear.com>
#
############################################################################

############################ BASE FLAGS ###################################
#
PRODUCTID		?= "WN-MT"
ROOTDIR			?= /opt/Wive-MT

########################## LIB/USER FLAGS #################################
#

LOPT  =
UOPT  =

############################################################################
#
# The makefiles need to know how to do things in different contexts
# To save some pain we put it all here
#
# First settings we always want for all build
#

ENDIAN				?= little
MACHINE				?= mips
ARCH				?= mips

#########################################################################################################
# crosscompile prepare
#########################################################################################################
ROOTDIR				?= /opt/Wive-MT
FIRMROOT			:= $(ROOTDIR)
LINUX_CONFIG			:= $(FIRMROOT)/linux/.config
TOOLCHAINDIR			:= $(FIRMROOT)/toolchain
LINUXINCDIR			:= $(LIBCDIRSHARED)/include
CONFIG_CROSS_COMPILER_PATH	:= $(TOOLCHAINDIR)/bin
CROSS_COMPILE			:= $(CONFIG_CROSS_COMPILER_PATH)/mipsel-linux-uclibc-
KERNEL_CROSS_COMPILE		:= $(CROSS_COMPILE)
CROSS				:= $(CROSS_COMPILE)

CC				:= $(CROSS_COMPILE)gcc
CPP				:= $(CROSS_COMPILE)cpp
AS				:= $(CROSS_COMPILE)as
CXX				:= $(CROSS_COMPILE)g++
AR				:= $(CROSS_COMPILE)ar
LD				:= $(CROSS_COMPILE)ld
OBJCOPY				:= $(CROSS_COMPILE)objcopy
RANLIB				:= $(CROSS_COMPILE)ranlib
ELF2FLT				:= elf2flt
STRIPTOOL			:= $(CROSS_COMPILE)strip
STRIP				:= $(STRIPTOOL)
GIT				:= /bin/true

GCC_DIR   			:= $(shell export LC_ALL=C; $(CC) -v 2>&1|grep specs|sed -e 's/.* \(.*\)specs/\1\./')
MACH_DIR  			:= $(shell export LC_ALL=C; $(CC) -print-multi-directory)

UCLINUX_BUILD_SET 		:= 0 # have we set a special config below

# Pull in common definitions
-include $(ROOTDIR)/vendors/config/common/config.arch
-include $(LINUX_CONFIG)

#############################################################################################
#
# General purpose lib building rules,  uClibc.config uses these when
# possible
#

############################ PLATFORM FLAGS #################################################
POPT	:= -Os -pipe -fno-builtin
POPT	+= -Dlinux -Dunix -DEMBED -DMIPSEL
POPT	+= -D__linux__ -D__unix__ -D__EMBED__ -D__MIPSEL__
ifdef CONFIG_RALINK_MT7621
POPT	+= -mips32r2 -march=mips32r2 -mtune=1004kc
else
POPT	+= -mips32r2 -march=mips32r2 -mtune=mips32r2
endif

############################ WARN/ERROR FLAGS ###############################################
# base flags for warnings
WOPT	:= -Wall -Wno-trigraphs -Wno-long-long -Wno-format-security -Wno-strict-aliasing

# disable pointer signed / unsigned warnings in gcc 4.0
WOPT	+= -Wno-pointer-sign

# disable variable unused warnings in gcc 4.6.0
WOPT	+= -Wno-unused-but-set-variable

# disable const variable unused warnings in gcc 6.0
# WOPT	+= -Wno-unused-const-variable

########################### BUILD FLAGS/OPTIONS##############################################

LOPT	+= $(POPT) $(WOPT)
UOPT	+= $(POPT) $(WOPT)

#############################################################################################
#
# Settings for building uclibc
#

ifdef UCLINUX_BUILD_LIB
ifdef CONFIG_LIB_DEBUG
	CFLAGS  :=  $(if $(LOPT),$(LOPT),-O1) -g
else
	CFLAGS  :=  $(if $(LOPT),$(LOPT),-Os) -fomit-frame-pointer -fno-stack-protector -femit-struct-debug-baseonly -fno-var-tracking
endif
ifdef CONFIG_LIB_SMALLSIZE
	# Defeat .eh_frame bloat (~25% smaller binary)
	CFLAGS += -fno-caller-saves -fno-reorder-blocks -fno-unwind-tables -fno-asynchronous-unwind-tables
endif
	# don't want all the CFLAGS for uClibc/Config
	ARCH_CFLAGS = $(CFLAGS)
	LDFLAGS = $(CFLAGS) $(CRT0) -Bsymbolic-functions
	UCLINUX_BUILD_SET=1
endif

##############################################################################################
#
# Settings for building user apps
#

ifdef UCLINUX_BUILD_USER

ifdef CONFIG_USER_DEBUG
	CFLAGS  :=  $(if $(UOPT),$(UOPT),-O1) -g
else
	CFLAGS  :=  $(if $(UOPT),$(UOPT),-Os) -fomit-frame-pointer -fno-stack-protector -femit-struct-debug-baseonly -fno-var-tracking
endif
ifdef CONFIG_USER_SMALLSIZE
	# Defeat .eh_frame bloat (~25% smaller binary)
	CFLAGS += -fno-caller-saves -fno-reorder-blocks -fno-unwind-tables -fno-asynchronous-unwind-tables
endif
	# include extlibs headers
	CFLAGS += -I$(ROOTDIR)
ifdef CONFIG_LIB_ICONV
	CFLAGS += -I$(LIBCDIRSHARED)/include/libiconv
endif
ifdef CONFIG_LIB_EVENT
	CFLAGS += -I$(LIBCDIRSHARED)/include/event2
endif
ifdef CONFIG_LIB_CURL
	CFLAGS += -I$(LIBCDIRSHARED)/include/curl
endif
ifdef CONFIG_LIB_UPNP
	CFLAGS += -I$(LIBCDIRSHARED)/include/upnp
endif
ifdef CONFIG_LIB_PCAP
	CFLAGS += -I$(LIBCDIRSHARED)/include/pcap
endif
ifdef CONFIG_LIB_OPENSSL
	CFLAGS += -I$(LIBCDIRSHARED)/include/openssl
endif
ifdef CONFIG_LIB_USB1
	CFLAGS += -I$(LIBCDIRSHARED)/include/libusb-1.0
endif
ifdef CONFIG_LIB_XML2
	CFLAGS += -I$(LIBCDIRSHARED)/include/libxml2
endif
ifdef CONFIG_LIB_NEON
	CFLAGS += -I$(LIBCDIRSHARED)/include/neon
endif
ifdef CONFIG_USER_IPTABLES
	CFLAGS += -I$(ROOTDIR)/user/iptables/include
endif
	# include mtd headers
	CFLAGS += -I$(LIBCDIRSHARED)/include/mtd

	# include nvram headers
	CFLAGS  += -I$(ROOTDIR)/libnvram

	# include wive headers
	CFLAGS  += -I$(ROOTDIR)/libwive

	# include system headers
	CFLAGS += -isystem $(LIBCDIRSHARED)/include

	# link options
	LDFLAGS += -L$(LIBCDIRSHARED)/lib
	ifeq ($(findstring glibc,$(LIBCDIR)),glibc)
	    CRTI     = -nostartfiles $(ROOTDIR)/lib/crt1.o \
			$(ROOTDIR)/lib/crti.o \
			$(GCC_DIR)/$(MACH_DIR)/crtbegin.o
	    SH_CRTI  = -nostartfiles $(ROOTDIR)/lib/crti.o \
			$(GCC_DIR)/$(MACH_DIR)/crtbeginS.o
	    CRAP = 		$(ROOTDIR)/lib/ld.so.1
	    CRTN     = \
			$(GCC_DIR)/$(MACH_DIR)/crtend.o \
			$(ROOTDIR)/lib/crtn.o \
			-lc_nonshared
	    SH_CRTN  = $(GCC_DIR)/$(MACH_DIR)/crtendS.o $(ROOTDIR)/lib/crtn.o
	else
	    CRTI     = -nostartfiles $(ROOTDIR)/lib/crt0.o
	    CRTN     =
	endif

	SH_LDFLAGS := $(LDFLAGS) $(SH_CRTI) -nodefaultlibs
	SH_LDLIBS  := $(LIBC) $(LIBGCC) $(SH_CRTN)
	LDLIBS   = $(LIBC) $(LIBGCC) $(CRTN)

	CXXLIBS  = -Wl,-Bstatic $(LIBSTDCPP) -Wl,-Bdynamic $(LIBC) $(LIBGCC) $(CRTN)

	FLTFLAGS :=

	# for anyone still using it
	CONVERT = /bin/true

	UCLINUX_BUILD_SET=1
endif

#############################################################################################
#
# Building flags applyed for all
#
# This is improve performance ~10% before pure -Os and ~5% bigest unpacked rootfs size
CFLAGS += -funit-at-a-time -ffast-math -fforce-addr -fconserve-stack

# disable invalid "can't wrap" optimizations for signed / pointers
CFLAGS += -fno-strict-overflow

# disable new loop optimization mode in 4.8.0 and later - fix regressions
CFLAGS += -fno-aggressive-loop-optimizations

# fix gcc-4.9.x miscompilation of some code
CFLAGS += -fno-var-tracking-assignments

# fix ~10% performance regression at 4.8.x and 4.7.x gcc
CFLAGS += -fno-tree-slsr -fno-tree-partial-pre

# more safe codegeneration
CFLAGS += -fno-delete-null-pointer-checks

# set cxx flags as cflags
CXXFLAGS := $(CFLAGS)

# set cpp flags as cflags
CPPFLAGS := $(CFLAGS)

# export for uclibc
ifdef UCLINUX_BUILD_LIB
UCLIB_CFLAG := $(CFLAGS)
STRIP_FLAGS := -x -R .note -R .comment -R .pdr -R .mdebug.abi32 -R .note.gnu.build-id -R .gnu.attributes -R .reginfo -g --strip-unneeded
endif

#############################################################################################
#
# fall through,  do other config options perhaps
#
#############################################################################################
